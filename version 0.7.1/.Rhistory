}else
{
F_BtoA[[counter]] <- rbind(cbind(i, ZZ[, 1], ZZ), M1, M2, do.call(rbind, M), M4)
}
}
}
F_BtoA <- do.call(rbind, F_BtoA)
if (length(R) == 2) {
F_BtoA <- F_BtoA[, c(1, 2, 3)]
}
if (length(R) == 3) {
F_BtoA <- F_BtoA[, c(1, 2, 4, 5)]
}
if (length(R) >= 4) {
F_BtoA <- F_BtoA[, -c(seq(4, 2 * length(R), 2))]
}
F_BtoA <- F_BtoA[, rev(1:ncol(F_BtoA))]
# Combine the results from moving from classification A to B, and vice
# versa.
F <- rbind(F_AtoB, F_BtoA)
# Remove any duplicated results (if any).
F <- F[!duplicated(F[, c(1:(k + 2))]), ]
# The if statement is based on which of classifications A or B is the
# reference one (if any).
if (Reference == "A") {
# Creation of the review flag for the correspondence table A:B.
F1 <- F[apply(F, 1, function(x) {
length(which(x == ""))
}) == 0, ]
F2 <- F[apply(F, 1, function(x) {
length(which(x == ""))
}) >= 1, ]
f <- aggregate(unique(F1[, c(1, ncol(F1))])[, 2], list(num = unique(F1[,
c(1, ncol(F1))])[, 2]), length)[which(aggregate(unique(F1[, c(1,
ncol(F1))])[, 2], list(num = unique(F1[, c(1, ncol(F1))])[, 2]),
length)[, 2] > 1), 1]
reviewF1 <- rep(0, nrow(F1))
reviewF1[which(F1[, ncol(F1)] %in% f)] <- 1
Review <- data.frame(cbind(rbind(F1, F2), c(reviewF1, rep(0, nrow(F2)))))
# Creation of the redundancy flag for the correspondence table A:B.
F1 <- Review[apply(Review, 1, function(x) {
length(which(x == ""))
}) == 0, ]
F2 <- Review[apply(Review, 1, function(x) {
length(which(x == ""))
}) >= 1, ]
f1 <- aggregate(F1[, c(1, ncol(F1)-1)], by = F1[, c(1, ncol(F1)-1)], length)[1:(ncol(F1[,
c(1, ncol(F1)-1)]) + 1)][which(aggregate(F1[, c(1, ncol(F1)-1)], by = F1[,
c(1, ncol(F1)-1)], length)[1:(ncol(F1[, c(1, ncol(F1)-1)]) + 1)][, 3] >=
2), 1:2]
redundancyF1 <- rep(0, nrow(F1))
redundancyF1[which(apply(F1[, c(1, ncol(F1)-1)], 1, paste, collapse = "") %in%
apply(f1, 1, paste, collapse = ""))] <- 1
correspondenceAB <- data.frame(cbind(rbind(F1, F2), c(redundancyF1, rep(0,
nrow(F2)))))
# Creation of the unmatched flag for the correspondence table A:B.
correspondenceAB <- data.frame(correspondenceAB, 0)
correspondenceAB[apply(correspondenceAB, 1, function(x) {
length(which(x == ""))
}) >= 1, ncol(correspondenceAB)] <- 1
colnames(correspondenceAB) <- c(paste(colnames(RRR[[1]][1])), paste(unlist(lapply(RRR,
function(x) {
colnames(x)[1]
}))[seq(k) + 1]), paste(colnames(RRR[[k + 2]][1])), "Review", "Redundancy",
"Unmatched")
} else if (Reference == "B") {
# Creation of the review flag for the correspondence table A:B.
F1 <- F[apply(F, 1, function(x) {
length(which(x == ""))
}) == 0, ]
F2 <- F[apply(F, 1, function(x) {
length(which(x == ""))
}) >= 1, ]
f <- aggregate(unique(F1[, c(1, ncol(F1))])[, 1], list(num = unique(F1[,
c(1, ncol(F1))])[, 1]), length)[which(aggregate(unique(F1[, c(1,
ncol(F1))])[, 1], list(num = unique(F1[, c(1, ncol(F1))])[, 1]),
length)[, 2] > 1), 1]
reviewF1 <- rep(0, nrow(F1))
reviewF1[which(F1[, 1] %in% f)] <- 1
Review <- data.frame(cbind(rbind(F1, F2), c(reviewF1, rep(0, nrow(F2)))))
# Creation of the redundancy flag for the correspondence table A:B.
F1 <- Review[apply(Review, 1, function(x) {
length(which(x == ""))
}) == 0, ]
F2 <- Review[apply(Review, 1, function(x) {
length(which(x == ""))
}) >= 1, ]
f1 <- aggregate(F1[, c(1, ncol(F1)-1)], by = F1[, c(1, ncol(F1)-1)], length)[1:(ncol(F1[,
c(1, ncol(F1)-1)]) + 1)][which(aggregate(F1[, c(1, ncol(F1)-1)], by = F1[,
c(1, ncol(F1)-1)], length)[1:(ncol(F1[, c(1, ncol(F1)-1)]) + 1)][, 3] >=
2), 1:2]
redundancyF1 <- rep(0, nrow(F1))
redundancyF1[which(apply(F1[, c(1, ncol(F1)-1)], 1, paste, collapse = "") %in%
apply(f1, 1, paste, collapse = ""))] <- 1
correspondenceAB <- data.frame(cbind(rbind(F1, F2), c(redundancyF1, rep(0,
nrow(F2)))))
# Creation of the unmatched flag for the correspondence table A:B.
correspondenceAB <- data.frame(correspondenceAB, 0)
correspondenceAB[apply(correspondenceAB, 1, function(x) {
length(which(x == ""))
}) >= 1, ncol(correspondenceAB)] <- 1
colnames(correspondenceAB) <- c(paste(colnames(RRR[[1]][1])), paste(unlist(lapply(RRR,
function(x) {
colnames(x)[1]
}))[seq(k) + 1]), paste(colnames(RRR[[k + 2]][1])), "Review", "Redundancy",
"Unmatched")
} else if (Reference == "none") {
# Creation of the redundancy flag for the correspondence table A:B.
F1 <- data.frame(F[apply(F, 1, function(x) {
length(which(x == ""))
}) == 0, ])
F2 <- data.frame(F[apply(F, 1, function(x) {
length(which(x == ""))
}) >= 1, ])
f1 <- aggregate(F1[, c(1, ncol(F1))], by = F1[, c(1, ncol(F1))], length)[1:(ncol(F1[,
c(1, ncol(F1))]) + 1)][which(aggregate(F1[, c(1, ncol(F1))], by = F1[,
c(1, ncol(F1))], length)[1:(ncol(F1[, c(1, ncol(F1))]) + 1)][, 3] >=
2), 1:2]
redundancyF1 <- rep(0, nrow(F1))
redundancyF1[which(apply(F1[, c(1, ncol(F1))], 1, paste, collapse = "") %in%
apply(f1, 1, paste, collapse = ""))] <- 1
correspondenceAB <- data.frame(cbind(rbind(F1, F2), c(redundancyF1, rep(0,
nrow(F2)))))
# Creation of the unmatched flag for the correspondence table A:B.
correspondenceAB <- data.frame(correspondenceAB, 0)
correspondenceAB[apply(correspondenceAB, 1, function(x) {
length(which(x == ""))
}) >= 1, ncol(correspondenceAB)] <- 1
colnames(correspondenceAB) <- c(paste(colnames(RRR[[1]][1])), paste(unlist(lapply(RRR,
function(x) {
colnames(x)[1]
}))[seq(k) + 1]), paste(colnames(RRR[[k + 2]][1])), "Redundancy",
"Unmatched")
}
},
error = function(e){
stop(simpleError("An error has occurred and execution needs to stop. Please check the input data."))
})
# Check the number of the unmatched codes.
if (length(which(as.vector(correspondenceAB$Unmatched) == 1))/nrow(correspondenceAB) <
MismatchTolerance) {
tryCatch({
# The following if statement is applied if there are any
# supplementary information for the classification A, in order to
# be adjusted next to the correspondence table A:B.
if (ncol(RRR[[1]]) >= 2) {
A1 <- RRR[[1]][match(correspondenceAB[, 1], unlist(RRR[[1]][, 1])),
2:ncol(RRR[[1]])]
A1[is.na(A1)] <- ""
A1 <- matrix(unlist(A1), ncol = length(2:ncol(RRR[[1]])))
colnames(A1) <- paste(paste(colnames(RRR[[1]])[1]), colnames(RRR[[1]])[2:ncol(RRR[[1]])],
sep = "_")
correspondenceAB <- cbind(correspondenceAB, A1)
}
# The following for loop is applied for the classfications C1, C2,
# ..., Ck.
for (i1 in c(2:(((length(RRR) + 1)/2) - 1))) {
# The if statement is applied if there are any supplementary
# information for the classfications C1, C2, ..., Ck, in order
# to be adjusted next to the correspondence table A:B.
if (ncol(RRR[[i1]]) >= 2) {
A1 <- RRR[[i1]][match(correspondenceAB[, i1], unlist(RRR[[i1]][,
1])), 2:ncol(RRR[[i1]])]
A1[is.na(A1)] <- ""
A1 <- matrix(unlist(A1), ncol = length(2:ncol(RRR[[i1]])))
colnames(A1) <- paste(paste(colnames(RRR[[i1]])[1]), colnames(RRR[[i1]])[2:ncol(RRR[[i1]])],
sep = "_")
correspondenceAB <- cbind(correspondenceAB, A1)
}
}
# The following if statement is applied if there are any
# supplementary information for the classification B, in order to
# be adjusted next to the correspondence table A:B.
if (ncol(RRR[[(length(RRR) + 1)/2]]) >= 2) {
A1 <- RRR[[(length(RRR) + 1)/2]][match(correspondenceAB[, (length(RRR) +
1)/2], unlist(RRR[[(length(RRR) + 1)/2]][, 1])), 2:ncol(RRR[[(length(RRR) +
1)/2]])]
A1[is.na(A1)] <- ""
A1 <- matrix(unlist(A1), ncol = length(2:ncol(RRR[[(length(RRR) +
1)/2]])))
colnames(A1) <- paste(paste(colnames(RRR[[k + 2]])[1]), colnames(RRR[[(length(RRR) +
1)/2]])[2:ncol(RRR[[(length(RRR) + 1)/2]])], sep = "_")
correspondenceAB <- cbind(correspondenceAB, A1)
}
# Find which .csv files are the correspondence tables.
Tail <- tail(c(1:length(RRR)), (length(RRR) - 1)/2)
# The following if statement is applied if there are any
# supplementary information for the correspondence table A:C1, in
# order to be adjusted next to the correspondence table A:B.
if (ncol(RRR[[Tail[1]]]) >= 3) {
A1 <- RRR[[Tail[1]]][match(data.frame(t(correspondenceAB[, 1:2])),
data.frame(t(RRR[[Tail[1]]][, 1:2]))), 3:ncol(RRR[[Tail[1]]])]
A1[is.na(A1)] <- ""
A1 <- matrix(unlist(A1), ncol = length(3:ncol(RRR[[Tail[1]]])))
colnames(A1) <- paste(paste(colnames(RRR[[Tail[1]]])[1]), colnames(RRR[[Tail[1]]])[3:ncol(RRR[[Tail[1]]])],
sep = "_")
correspondenceAB <- cbind(correspondenceAB, A1)
}
# The following if statement is applied if there are any
# supplementary information for the correspondence tables (C1:C2 -
# C2:C3), (C2:C3 - C3:C4), ..., (C(k-2):C(k-1) - C(k-1):Ck), in
# order to be adjusted next to the correspondence table A:B.
if (length(Tail) >= 3) {
for (i2 in 2:(length(Tail) - 1)) {
if (ncol(RRR[[Tail[i2]]]) >= 3) {
A1 <- RRR[[Tail[i2]]][match(data.frame(t(correspondenceAB[, c(i2,
i2 + 1)])), data.frame(t(RRR[[Tail[i2]]][, 1:2]))), 3:ncol(RRR[[Tail[i2]]])]
A1[is.na(A1)] <- ""
A1 <- matrix(unlist(A1), ncol = length(3:ncol(RRR[[Tail[i2]]])))
colnames(A1) <- paste(paste(colnames(RRR[[Tail[i2]]])[1]), colnames(RRR[[Tail[i2]]])[3:ncol(RRR[[Tail[i2]]])],
sep = "_")
correspondenceAB <- cbind(correspondenceAB, A1)
}
}
}
# The following if statement is applied if there are any
# supplementary information for the correspondence table B:Ck, in
# order to be adjusted next to the correspondence table A:B.
if (ncol(RRR[[Tail[length(Tail)]]]) >= 3) {
A1 <- RRR[[Tail[length(Tail)]]][match(data.frame(t(correspondenceAB[,
c(((length(RRR) + 1)/2) - 1, (length(RRR) + 1)/2)])), data.frame(t(RRR[[Tail[length(Tail)]]][,
c(2, 1)]))), 3:ncol(RRR[[Tail[length(Tail)]]])]
A1[is.na(A1)] <- ""
A1 <- matrix(unlist(A1), ncol = length(3:ncol(RRR[[Tail[length(Tail)]]])))
colnames(A1) <- paste(paste(colnames(RRR[[Tail[length(Tail)]]])[1]),
colnames(RRR[[Tail[length(Tail)]]])[3:ncol(RRR[[Tail[length(Tail)]]])],
sep = "_")
correspondenceAB <- cbind(correspondenceAB, A1)
}
},
error = function(e){
stop(simpleError("An error has occurred and execution needs to stop. Please check the input data."))
})
} else {
# Error message in case the percentage of unmatched codes between A
# and B is larger than the desired threshold.
stop("Too many codes in either of classifications A and B cannot be mapped to any code in the other one.")
}
tryCatch({
# The final correspondence table A:B is sorted, firstly, based on
# classification A, and then, based on classification B.
correspondenceAB <- correspondenceAB[order(correspondenceAB[, 1], correspondenceAB[,
(length(RRR) + 1)/2], decreasing = FALSE), ]
# Create a data frame that contains the names of the
# classifications.
CsvNames <- data.frame(matrix(0, k + 2, 1))
CsvNames[1, 1] <- paste("A:", colnames(correspondenceAB)[1], sep = " ")
CsvNames[k + 2, 1] <- paste("B:", colnames(correspondenceAB)[k + 2],
sep = " ")
for (i3 in seq(k) + 1) {
CsvNames[i3, 1] <- paste(paste("C", i3 - 1, ":", sep = ""), colnames(correspondenceAB)[i3],
sep = " ")
}
CsvNames <- data.frame(CsvNames)
colnames(CsvNames) <- paste("Classification:", "Name", sep = " ")
# Create a data frame that contains the final correspondence table
# (final desired table).
Final <- apply(correspondenceAB, 2, function(x) {
gsub(" ", " ", x)
})
if (is.null(dim(Final))) {
Final <- t(data.frame(Final))
rownames(Final) <- 1
}
},
error = function(e){
stop(simpleError("An error has occurred and execution needs to stop. Please check the input data."))
})
# Check so as to write (or not) the final correspondence table
# (final desired table) as well as the names of classifications in
# two seperate csv files.
tryCatch({
if (!is.null(Name)) {
readr::write_excel_csv(data.frame(Final, check.names = FALSE), file = Name, col_names = TRUE)
pos <- regexpr("\\/[^\\/]*$", Name)
Name1 <- substr(Name, 1, pos[[1]])
Name2 <- substr(Name, pos[[1]]+1, nchar(Name))
write.csv(CsvNames, file = paste0(Name1, "classificationNames_", Name2), row.names = FALSE)
}
},
error = function(e){
stop(simpleError("An error occurred while trying to write the output to the specified files. Please check the respective input parameters."))
})
# The final list that contains the final correspondence table
# (final desired table) as a data frame as well as the names of
# classifications as a data frame.
tryCatch({
FinalResults <- list()
FinalResults[[1]] <- data.frame(Final, check.names = FALSE, row.names = NULL)
FinalResults[[2]] <- CsvNames
names(FinalResults) <- c("newCorrespondenceTable", "classificationNames")
# newCorrespondenceTable function returns the final correspondence
# table A:B, that contains the pivot classifications C1, C2, ...,
# Ck, as well as any supplementary information about the
# classification tables A, C1, C2, ..., Ck, B, and the
# correspondence tables A:C1, (C1:C2 - C2:C3), (C2:C3 - C3:C4),
# ..., (C(k-2):C(k-1) - C(k-1):Ck), B:Ck.
return(FinalResults)
},
error = function(e){
stop(simpleError("An error has occurred and execution needs to stop. Please check the input data."))
})
}
#SAMPLE 1
NamesCsv <- system.file("extdata", "names1.csv", package = "correspondenceTables")
NamesCsv
A <- read.csv(NamesCsv, header = FALSE, sep = ",")
A[1, 1] <- system.file("extdata", A[1,1], package = "correspondenceTables")
for (mat.index in 2:ncol(A)) {
A[(mat.index-1):mat.index, mat.index] <- system.file("extdata", A[(mat.index-1):mat.index, mat.index], package = "correspondenceTables")
}
write.table(x = A, file = NamesCsv, row.names = FALSE, col.names = FALSE, sep = ",")
A[
}
A
#SAMPLE 4
NamesCsv <- system.file("extdata", "names4.csv", package = "correspondenceTables")
A <- read.csv(NamesCsv, header = FALSE, sep = ",")
A
A[1, 1] <- system.file("extdata", A[1,1], package = "correspondenceTables")
for (mat.index in 2:ncol(A)) {
A[(mat.index-1):mat.index, mat.index] <- system.file("extdata", A[(mat.index-1):mat.index, mat.index], package = "correspondenceTables")
}
A
write.table(x = A, file = NamesCsv, row.names = FALSE, col.names = FALSE, sep = ",")
A
# Change the default values.
NCT <- newCorrespondenceTable(NamesCsv, "newCorrespondenceTable.csv", "A", 0.9)
devtools::build_vignettes(".")
setwd("C:/Users/Dell/Desktop")
devtools::build_vignettes(".")
paste("Classification:", "CSVout", sep = " ")
CSVout="dd.csv"
colnames(CsvNames) <- paste("Classification:", "CSVout", sep = " ")
paste("Classification:", "CSVout", sep = " ")
paste("Classification:", CSVout, sep = " ")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/18. v18(updata v17)(errors from Eurostat)/correspondenceTables_0.3.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/18. v18(updata v17)(errors from Eurostat)/correspondenceTables_0.3.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
library(correspondenceTables)
newCorrespondenceTable("4by4sample.csv", "test.csv", Reference = "A", MismatchTolerance = 0.8)
setwd("C:/Users/Dell/Desktop/extdata")
newCorrespondenceTable("4by4sample.csv", "test.csv", Reference = "A", MismatchTolerance = 0.8)
library(correspondenceTables)
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/18. v18(updata v17)(errors from Eurostat)/correspondenceTables_0.3.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/18. v18(updata v17)(errors from Eurostat)/correspondenceTables_0.3.0.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
browseVignettes("correspondenceTables")
setwd("C:/Users/Dell/Desktop/4by4miniExample")
library(correspondenceTables)
AAA=newCorrespondenceTable("4by4miniExampleShortNames.csv", "test.csv", Reference = "none", MismatchTolerance = 0.9)
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/19. v19(update v18)(errors from Eurostat)/correspondenceTables_0.4.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
setwd("C:/Users/Dell/Desktop/extdata")
fullPath <- function(CSVraw, CSVappended){
NamesCsv <- system.file("extdata", CSVraw, package = "correspondenceTables")
A <- read.csv(NamesCsv, header = FALSE, sep = ",")
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
if (A[i,j]!="") {
A[i, j] <- system.file("extdata", A[i, j], package = "correspondenceTables")
}}}
write.table(x = A, file = CSVappended, row.names = FALSE, col.names = FALSE, sep = ",")
return(A)
}
fullPath("names1.csv", "names.csv")
NCT <- newCorrespondenceTable("names.csv", "newCorrespondenceTable.csv", "A", 0.9)
library(correspondenceTables)
NCT <- newCorrespondenceTable("names.csv", "newCorrespondenceTable.csv", "A", 0.9)
print(NCT[[1]][1:10, 1:6])
NamesCsv <- system.file("extdata", "names1.csv", package = "correspondenceTables")
NamesCsv
A <- read.csv(NamesCsv, header = FALSE, sep = ",")
A
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
if (A[i,j]!="") {
A[i, j] <- system.file("extdata", A[i, j], package = "correspondenceTables")
}}}
write.table(x = A, file = "names.csv", row.names = FALSE, col.names = FALSE, sep = ",")
NCT <- newCorrespondenceTable("names.csv", "newCorrespondenceTable.csv", "A", 0.9)
print(NCT[[1]][1:10, 1:6])
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/19. v19(update v18)(errors from Eurostat)/correspondenceTables_0.4.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/19. v19(update v18)(errors from Eurostat)/correspondenceTables_0.4.0.tar.gz", repos = NULL, type = "source")
browseVignettes("correspondenceTables")
library(correspondenceTables)
A <- system.file("extdata", "CN2021.csv", package = "correspondenceTables")
AStar <- system.file("extdata", "CN2022.csv", package = "correspondenceTables")
B <- system.file("extdata", "CPA21.csv", package = "correspondenceTables")
AB <- system.file("extdata", "CN2021_CPA21.csv", package = "correspondenceTables")
AAStar <- system.file("extdata", "CN2021_CN2022.csv", package = "correspondenceTables")
fullPath <- function(CSVraw, CSVappended){
NamesCsv <- system.file("extdata", CSVraw, package = "correspondenceTables")
A <- read.csv(NamesCsv, header = FALSE, sep = ",")
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
if (A[i,j]!="") {
A[i, j] <- system.file("extdata", A[i, j], package = "correspondenceTables")
}}}
write.table(x = A, file = CSVappended, row.names = FALSE, col.names = FALSE, sep = ",")
return(A)
}
fullPath("names1.csv", "names.csv")
NCT <- newCorrespondenceTable("names.csv", "newCorrespondenceTable.csv", "A", 0.9)
colnames(NCT[[1]])
A <- system.file("extdata", "CN2021.csv", package = "correspondenceTables")
AStar <- system.file("extdata", "CN2022.csv", package = "correspondenceTables")
B <- system.file("extdata", "CPA21.csv", package = "correspondenceTables")
AB <- system.file("extdata", "CN2021_CPA21.csv", package = "correspondenceTables")
AAStar <- system.file("extdata", "CN2021_CN2022.csv", package = "correspondenceTables")
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTable.csv",
"A", 0.8, 0.9)
colnames(UPC[[1]])
UPC[[1]][,1:11]
UPC[[1]][,1:11]
UPC[[1]][which(UPC[[1]][,7]==1),1:11]
UPC[[1]][which(UPC[[1]][,7]==1),1:11]
UPC[[1]][,7]
UPC[[1]][,7]==1
A <- system.file("extdata", "NAICS2017.csv", package = "correspondenceTables")
AStar <- system.file("extdata", "NAICS2022.csv", package = "correspondenceTables")
B <- system.file("extdata", "NACE.csv", package = "correspondenceTables")
AB <- system.file("extdata", "NAICS2017_NACE.csv", package = "correspondenceTables")
AAStar <- system.file("extdata", "NAICS2017_NAICS2022.csv", package = "correspondenceTables")
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTable.csv",
"A", 0.8, 0.9)
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/19. v19(update v18)(errors from Eurostat)/correspondenceTables_0.4.0.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
browseVignettes("correspondenceTables")
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/19. v19(update v18)(errors from Eurostat)/correspondenceTables_0.4.0.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
browseVignettes("correspondenceTables")
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/20. v20(update v19)(errors from Eurostat)/correspondenceTables_0.5.0.tar.gz", repos = NULL, type = "source")
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTable.csv", "A", 0.1, 0.1)
library(correspondenceTables)
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTable.csv", "A", 0.1, 0.1)
A <- system.file("extdata", "CN2021.csv", package = "correspondenceTables")
AStar <- system.file("extdata", "CN2022.csv", package = "correspondenceTables")
B <- system.file("extdata", "PRODCOM2021.csv", package = "correspondenceTables")
AB <- system.file("extdata", "CN2021_PRODCOM2021.csv", package = "correspondenceTables")
AAStar <- system.file("extdata", "CN2021_CN2022.csv", package = "correspondenceTables")
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTable.csv", "A", 0.1, 0.1)
A <- system.file("extdata", "CN2021.csv", package = "correspondenceTables")
AStar <- system.file("extdata", "CN2022.csv", package = "correspondenceTables")
B <- system.file("extdata", "CPA21.csv", package = "correspondenceTables")
AB <- system.file("extdata", "CN2021_CPA21.csv", package = "correspondenceTables")
AAStar <- system.file("extdata", "CN2021_CN2022.csv", package = "correspondenceTables")
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTable.csv",
"B", 0.1, 0.1)
print(UPC[[1]][1:10, 1:7])
print(UPC[[2]])
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/20. v20(update v19)(errors from Eurostat)/correspondenceTables_0.5.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/20. v20(update v19)(errors from Eurostat)/correspondenceTables_0.5.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/21. v21(update v20)(errors from Eurostat)/correspondenceTables_0.5.1.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/21. v21(update v20)(errors from Eurostat)/correspondenceTables_0.5.1.tar.gz", repos = NULL, type = "source")
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/21. v21(update v20)(errors from Eurostat)/correspondenceTables_0.5.1.tar.gz", repos = NULL, type = "source")
browseVignettes("correspondenceTables")
devtools::build_vignettes(".")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/22. v22(update v21)(errors from Eurostat)/correspondenceTables_0.6.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
devtools::build_vignettes(".")
library(correspondenceTables)
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/23. v23(update v22)(errors from Eurostat)/correspondenceTables_0.7.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/23. v23(update v22)(errors from Eurostat)/correspondenceTables_0.7.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/23. v23(update v22)(errors from Eurostat)/correspondenceTables_0.7.0.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/23. v23(update v22)(errors from Eurostat)/correspondenceTables_0.7.0.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/23. v23(update v22)(errors from Eurostat)/correspondenceTables_0.7.0.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
?correspondenceTables
?CcorrespondenceTables
??correspondenceTables
library(correspondenceTables)
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTableCase1.csv",
"none", 0.4, 0.4)
A <- system.file("extdata", "CN2021.csv", package = "correspondenceTables")
AStar <- system.file("extdata", "CN2022.csv", package = "correspondenceTables")
B <- system.file("extdata", "CPA21.csv", package = "correspondenceTables")
AB <- system.file("extdata", "CN2021_CPA21.csv", package = "correspondenceTables")
AAStar <- system.file("extdata", "CN2021_CN2022.csv", package = "correspondenceTables")
UPC <- updateCorrespondenceTable(A, B, AStar, AB, AAStar, "updateCorrespondenceTableCase1.csv",
"none", 0.4, 0.4)
getwd()
UPC[[1]]
colnames(UPC[[1]])
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/24. v24(update v23)(errors from Eurostat)/correspondenceTables_0.7.1.tar.gz", repos = NULL, type = "source")
library(correspondenceTables)
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/24. v24(update v23)(errors from Eurostat)/correspondenceTables_0.7.1.tar.gz", repos = NULL, type = "source")
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/24. v24(update v23)(errors from Eurostat)/correspondenceTables_0.7.1.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/24. v24(update v23)(errors from Eurostat)/correspondenceTables_0.7.1.tar.gz", repos = NULL, type = "source")
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/24. v24(update v23)(errors from Eurostat)/correspondenceTables_0.7.1.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes(".")
browseVignettes("correspondenceTables")
install.packages("C:/Users/Dell/Desktop/R-PACKAGE/PACKAGES/24. v24(update v23)(errors from Eurostat)/correspondenceTables_0.7.1.tar.gz", repos = NULL, type = "source")
browseVignettes("correspondenceTables")
